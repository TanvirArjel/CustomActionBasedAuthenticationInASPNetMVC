@using CustomAuthenticationInASPNetMVC.Models
@model Role

@{
    ViewBag.Title = "Create";
}
<br/>
<div class="panel panel-primary">
    <div class="panel-heading">
        <span style="font-size: 25px">Create Role</span>
    </div>
    <div class="panel-body">
        @using (Html.BeginForm()) 
        {
            @Html.AntiForgeryToken()
    
            <div class="form-horizontal">
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="row">
                    <div class="col-md-6">
                        <div class="input-group">
                            @Html.LabelFor(model => model.RoleName, htmlAttributes: new { @class = "input-group-addon" })
                            @Html.EditorFor(model => model.RoleName, new { htmlAttributes = new { @class = "form-control" } })
                        </div>
                        @Html.ValidationMessageFor(model => model.RoleName, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-6">
                        <div class="input-group">
                            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "input-group-addon" })
                            @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                        </div>
                        @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                    </div>
                </div>
                <br/>
                <div class="form-group">
                    <span class="btn btn-default"><strong>Select Permissions for this role <i class="fa fa-arrow-circle-down" aria-hidden="true"></i></strong></span>
                    <br/>
                    <br/>

                    <div class="form-control" style="height: auto">
                        @{

                            List<ActionCategory> actionCategories = ViewBag.AllActionCategories;

                            foreach (var actionCategory in actionCategories)
                            {
                                <div style="border: 1px solid #000; padding: 10px">
                                    <span class="action-cateogry btn btn-default">
                                        <input type="checkbox" name="selectedActionCategories" value="@actionCategory.ActionCategoryId"/>
                                        <strong>@actionCategory.ActionCategoryName</strong>
                                    </span>
                                    
                                    <br/>
                                    <hr/>
                                    @{
                                        var count = Enumerable.Count(actionCategory.ControllerActions);
                                        foreach (var controllerAction in actionCategory.ControllerActions)
                                        {
                                            <span class="controller-action btn btn-default">
                                                <input type="checkbox" name="selectedActions" value="@controllerAction.ActionId"/>
                                                @controllerAction.ActionName
                                            </span>
                                            
                                            if (--count > 0)
                                            {
                                                @:|
                                            }
                                        }
                                    }

                                </div>

                                <br />
                                <br />

                            }
                        }
                    </div>

                </div>

                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="Create" class="btn btn-success" />
                        @Html.ActionLink("Back to List", "Index",null,new {@class = "btn btn-primary" })
                    </div>
                </div>
            </div>
        }
    </div>
</div>




@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script>
        $(document).ready(function () {

            $("span.action-cateogry").on("click", function () {
                if ($(this).children("input:checkbox").prop("checked")) {

                    $(this).removeClass("btn-success").addClass("btn-default");
                    $(this).siblings().removeClass("btn-primary").addClass("btn-default");
                    $(this).children("input:checkbox").prop("checked", false);
                    $(this).siblings().children("input[name = 'selectedActions']").prop("checked", false);
                } else
                {
                    $(this).removeClass("btn-default").addClass("btn-success");
                    $(this).siblings().removeClass("btn-default").addClass("btn-primary");
                    $(this).children("input:checkbox").prop("checked", true);
                    $(this).siblings().children("input[name = 'selectedActions']").prop("checked", true);
                }
                
            });


            $("span.controller-action").on("click", function () {
                if ($(this).children("input:checkbox").prop("checked")) {
                    $(this).removeClass("btn-primary").addClass("btn-default");
                    $(this).children("input:checkbox").prop("checked", false);
                    var totalChecked = $(this).siblings().children("input[name = 'selectedActions']:checkbox:checked").length;
                    if (totalChecked <= 0) {
                        $(this).siblings("span.action-cateogry").removeClass("btn-success").addClass("btn-default");
                        $(this).siblings().children("input[name = 'selectedActionCategories']").prop("checked", false);
                    }
                } else {
                    $(this).removeClass("btn-default").addClass("btn-primary");
                    $(this).siblings("span.action-cateogry").removeClass("btn-default").addClass("btn-success");
                    $(this).children("input:checkbox").prop("checked", true);
                    $(this).siblings().children("input[name = 'selectedActionCategories']").prop("checked", true);
                }

            });



            $("input[name = 'selectedActionCategories']").on("change", function () {
                if ($(this).prop("checked")) {
                    $(this).prop("checked", false);
                    $(this).parent().removeClass("btn-success").addClass("btn-default");

                    $(this).parent().siblings().removeClass("btn-primary").addClass("btn-default");
                    $(this).parent().siblings().children("input[name = 'selectedActions']").prop("checked", false);
                } else {
                    $(this).prop("checked", true);
                    $(this).parent().removeClass("btn-default").addClass("btn-success");

                    $(this).parent().siblings().removeClass("btn-default").addClass("btn-primary");
                    $(this).parent().siblings().children("input[name = 'selectedActions']").prop("checked", true);
                }
            });

            $("input[name = 'selectedActions']").on("change", function () {
                if ($(this).prop("checked")) {

                    $(this).prop("checked", false);
                    $(this).parent().removeClass("btn-primary").addClass("btn-default");

                    var totalChecked = $(this).parent().siblings().children("input[name = 'selectedActions']:checkbox:checked").length;
                    if (totalChecked <= 0) {
                        $(this).parent().siblings().children("input[name = 'selectedActionCategories']").prop("checked", false);
                        $(this).parent().siblings("span.action-cateogry").removeClass("btn-success").addClass("btn-default");
                    }
                } else {
                    $(this).prop("checked", true);
                    $(this).parent().removeClass("btn-default").addClass("btn-primary");

                    $(this).parent().siblings().children("input[name = 'selectedActionCategories']").prop("checked", true);
                    $(this).parent().siblings("span.action-cateogry").removeClass("btn-default").addClass("btn-success");
                }
            });



            //$("input[name = 'selectedActionCategories']").on("change", function() {
            //    if ($(this).prop("checked")) {
            //        $(this).siblings("input[name = 'selectedActions']").prop("checked", true);
            //    } else {
            //        $(this).siblings("input[name = 'selectedActions']").prop("checked", false);
            //    }
            //});

            //$("input[name = 'selectedActions']").on("change", function() {
            //    if ($(this).prop("checked")) {
            //        $(this).siblings("input[name = 'selectedActionCategories']").prop("checked", true);
            //    } else {
            //        var totalChecked = $(this).siblings("input[name = 'selectedActions']:checkbox:checked").length;
            //        if (totalChecked <= 0) {
            //            $(this).siblings("input[name = 'selectedActionCategories']").prop("checked", false);
            //        }
            //    }
            //});
        });
        
    </script>
}
